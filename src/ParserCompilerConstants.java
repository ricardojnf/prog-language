/* Generated By:JavaCC: Do not edit this line. ParserCompilerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEF = 5;
  /** RegularExpression Id. */
  int IN = 6;
  /** RegularExpression Id. */
  int END = 7;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int THEN = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int DO = 12;
  /** RegularExpression Id. */
  int PRINT = 13;
  /** RegularExpression Id. */
  int PRINTLN = 14;
  /** RegularExpression Id. */
  int Bool = 15;
  /** RegularExpression Id. */
  int NEW = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int BOOLEAN = 18;
  /** RegularExpression Id. */
  int REF = 19;
  /** RegularExpression Id. */
  int Id = 20;
  /** RegularExpression Id. */
  int Num = 21;
  /** RegularExpression Id. */
  int PLUS = 22;
  /** RegularExpression Id. */
  int MINUS = 23;
  /** RegularExpression Id. */
  int TIMES = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int REMAINDER = 26;
  /** RegularExpression Id. */
  int EQUALS = 27;
  /** RegularExpression Id. */
  int DOUBLE_EQUALS = 28;
  /** RegularExpression Id. */
  int GREATER_EQ = 29;
  /** RegularExpression Id. */
  int LESS_EQ = 30;
  /** RegularExpression Id. */
  int GREATER_THAN = 31;
  /** RegularExpression Id. */
  int LESS_THAN = 32;
  /** RegularExpression Id. */
  int ATRIBUTION = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int EXCLAMATION = 35;
  /** RegularExpression Id. */
  int AND = 36;
  /** RegularExpression Id. */
  int OR = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int TWO_POINTS = 39;
  /** RegularExpression Id. */
  int LPAR = 40;
  /** RegularExpression Id. */
  int RPAR = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"def\"",
    "\"in\"",
    "\"end\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"print\"",
    "\"println\"",
    "<Bool>",
    "\"new\"",
    "\"int\"",
    "\"bool\"",
    "\"ref\"",
    "<Id>",
    "<Num>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\":=\"",
    "\";\"",
    "\"!\"",
    "\"&&\"",
    "\"||\"",
    "\"~\"",
    "\":\"",
    "\"(\"",
    "\")\"",
  };

}
