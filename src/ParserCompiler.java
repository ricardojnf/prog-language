/* Generated By:JavaCC: Do not edit this line. ParserCompiler.java */
/** ID lister. */
public class ParserCompiler implements ParserCompilerConstants {
  /** Main entry point. */
  public static void main(String args [])
  {
    ParserCompiler parser = new ParserCompiler(System.in);
    ASTNode exp;
    Environment env = null;
    while (true)
    {
      try
      {
        exp = parser.Start(env);
        //System.out.println(exp.eval(env));
      }
      catch (Exception e)
      {
        //System.out.println("Syntax Error!");
        parser.ReInit(System.in);
      }
    }
  }

  static final public ASTNode Start(Environment<?> e) throws ParseException {
  ASTNode t;
    t = ExpM(e);
    jj_consume_token(0);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode ExpM(Environment<?> e) throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = ExpLog(e);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      t2 = ExpLog(e);
      t1 = new ASTSeq(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode ExpLog(Environment<?> e) throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Exp(e);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        op = jj_consume_token(AND);
        break;
      case OR:
        op = jj_consume_token(OR);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp(e);
      switch(op.kind) {
            case AND:
                        t1 = new ASTLogicAnd(t1,t2); break;
                case OR:
                        t1 = new ASTLogicOr(t1,t2); break;
                default:
                        break;
          }
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp(Environment<?> e) throws ParseException {
  Token op;
  ASTNode t1=null, t2;
  boolean flag = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
    case IF:
    case WHILE:
    case Bool:
    case NEW:
    case Id:
    case Num:
    case PLUS:
    case MINUS:
    case EXCLAMATION:
    case NOT:
    case LPAR:
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(NOT);
                  flag = !flag;
      }
      t1 = ExpAlg(e);
        if(flag) t1 = new ASTLogicNeg(t1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_EQUALS:
      case GREATER_EQ:
      case LESS_EQ:
      case GREATER_THAN:
      case LESS_THAN:
      case ATRIBUTION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_EQUALS:
          op = jj_consume_token(DOUBLE_EQUALS);
          break;
        case ATRIBUTION:
          op = jj_consume_token(ATRIBUTION);
          break;
        case GREATER_EQ:
          op = jj_consume_token(GREATER_EQ);
          break;
        case LESS_EQ:
          op = jj_consume_token(LESS_EQ);
          break;
        case GREATER_THAN:
          op = jj_consume_token(GREATER_THAN);
          break;
        case LESS_THAN:
          op = jj_consume_token(LESS_THAN);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = ExpAlg(e);
        switch(op.kind) {
                case DOUBLE_EQUALS:
                        t1 = new ASTEq(t1,t2); break;
                case ATRIBUTION:
                        t1 = new ASTAssign(t1,t2); break;
                case GREATER_EQ:
                        t1 = new ASTGreatEq(t1,t2); break;
                case LESS_EQ:
                        t1 = new ASTLessEq(t1,t2); break;
                case GREATER_THAN:
                        t1 = new ASTGreaterThan(t1,t2); break;
                case LESS_THAN:
                        t1 = new ASTLessThan(t1,t2); break;
                default:
                        break;
          }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    case PRINT:
    case PRINTLN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        op = jj_consume_token(PRINT);
        break;
      case PRINTLN:
        op = jj_consume_token(PRINTLN);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case IF:
      case WHILE:
      case Bool:
      case NEW:
      case Id:
      case Num:
      case PLUS:
      case MINUS:
      case EXCLAMATION:
      case LPAR:
        t1 = ExpAlg(e);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
        if(op.kind == PRINT)
                t1 = new ASTPrint(t1, false);
        else t1 = new ASTPrint(t1, true);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode ExpAlg(Environment<?> e) throws ParseException {
  Token op;
  ASTNode t1 = null, t2;
    t1 = Term(e);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term(e);
          switch(op.kind) {
            case PLUS:
                        t1 = new ASTPlus(t1,t2); break;
                case MINUS:
                        t1 = new ASTSub(t1,t2); break;
            case AND:
                        t1 = new ASTLogicAnd(t1,t2); break;
                case OR:
                        t1 = new ASTLogicOr(t1,t2); break;
                default:
                        break;
          }
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term(Environment<?> e) throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Fact(e);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
      case REMAINDER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      case REMAINDER:
        op = jj_consume_token(REMAINDER);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Fact(e);
      if (op.kind == TIMES) t1 = new ASTMult(t1, t2);
      else if(op.kind == DIV) t1 = new ASTDiv(t1, t2);
      else t1 = new ASTRemainder(t1,t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact(Environment<?> e) throws ParseException {
  Token n, op;
  int c = 0;
  java.util.List<Bind> defInits;
  ASTNode t, tDefInit, tDefBody = null;
  IType type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
      t = new ASTNum(Integer.parseInt(n.image));
      break;
    case Bool:
      n = jj_consume_token(Bool);
         t = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case NEW:
      jj_consume_token(NEW);
      t = Fact(e);
         t = new ASTMCell(t);
      break;
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n = jj_consume_token(PLUS);
        break;
      case MINUS:
        n = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = Fact(e);
      if(n.kind == MINUS)
        t = new ASTMult(new ASTNum(-1), t);
      break;
    case DEF:
      jj_consume_token(DEF);
              defInits = new java.util.LinkedList<Bind>();
      label_6:
      while (true) {
        n = jj_consume_token(Id);
        jj_consume_token(TWO_POINTS);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case REF:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_7;
          }
          jj_consume_token(REF);
                                          c++;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          op = jj_consume_token(INT);
          break;
        case BOOLEAN:
          op = jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                        if(op.kind == INT)
                                                                                type = new TInt();
                                                                        else
                                                                                type = new TBool();
                                                                        for(int i = 0; i < c; i++) {
                                                                                type = new TRef(type);
                                                                        }
        jj_consume_token(EQUALS);
        tDefInit = ExpM(e);
                                    defInits.add(new Bind(n.image,tDefInit, type)); c = 0;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Id:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(IN);
      tDefBody = ExpM(e);
      jj_consume_token(END);
      t = new ASTDef(defInits, tDefBody);
      break;
    case IF:
      jj_consume_token(IF);
      t = ExpM(e);
      jj_consume_token(THEN);
      tDefInit = ExpM(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        tDefBody = ExpM(e);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(END);
                t = new ASTIfThenElse(t, tDefInit, tDefBody);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      t = ExpM(e);
      jj_consume_token(DO);
      tDefInit = ExpM(e);
      jj_consume_token(END);
                t = new ASTWhileDo(t, tDefInit);
      break;
    case Id:
      n = jj_consume_token(Id);
      t = new ASTVar(n.image);
      break;
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      t = Fact(e);
      t = new ASTReference(t);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = ExpM(e);
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0xf0000000,0xf0000000,0x6000,0xf18920,0xf1e920,0xc00000,0xc00000,0x7000000,0x7000000,0xc00000,0x80000,0x60000,0x100000,0x400,0xf18920,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x30,0x30,0x40,0x3,0x3,0x0,0x108,0x148,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x108,};
   }

  /** Constructor with InputStream. */
  public ParserCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserCompiler(ParserCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
